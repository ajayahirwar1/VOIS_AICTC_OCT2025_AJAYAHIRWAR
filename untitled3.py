# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ap9sTTcLrMyCMJGhkVTA9D3bGmXiHOTJ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from google.colab import files
uploaded = files.upload()

df = pd.read_excel("1730285881-Airbnb_Open_Data.xlsx")

df.head()

df.info()

df.duplicated().value_counts()

df[df['neighbourhood group']== 'brookln']

# 1. Drop duplicates
df.drop_duplicates(inplace=True)

# 2. Drop insufficient columns
df.drop(['house_rules', 'license'], axis=1, inplace=True, errors='ignore')

# 3. Clean price column (only if exists)
if 'price' in df.columns:
    df['price'] = df['price'].astype(str).str.replace('$','', regex=False)
    df['price'] = df['price'].str.replace(',','', regex=False)
    df.rename(columns={'price':'price_$'}, inplace=True)

# 4. Clean service fee column (only if exists)
if 'service fee' in df.columns:
    df['service fee'] = df['service fee'].astype(str).str.replace('$','', regex=False)
    df['service fee'] = df['service fee'].str.replace(',','', regex=False)
    df.rename(columns={'service fee':'service_fee_$'}, inplace=True)

# 5. Drop missing values
df.dropna(inplace=True)

# 6. Type conversions (check before converting)
if 'price_$' in df.columns:
    df['price_$'] = df['price_$'].astype(float)

if 'service_fee_$' in df.columns:
    df['service_fee_$'] = df['service_fee_$'].astype(float)

if 'id' in df.columns:
    df['id'] = df['id'].astype(str)

if 'host id' in df.columns:
    df['host id'] = df['host id'].astype(str)

if 'last review' in df.columns:
    df['last review'] = pd.to_datetime(df['last review'], errors='coerce')

if 'construction year' in df.columns:
    df['construction year'] = df['construction year'].astype('Int64')

# 7. Fix spelling in neighbourhood group
if 'neighbourhood group' in df.columns:
    df.loc[df['neighbourhood group'].str.lower() == 'broken', 'neighbourhood group'] = 'Brooklyn'

# 8. Remove outliers in availability
if 'availability 365' in df.columns:
    df = df[df['availability 365'] <= 500]

print("âœ… Data cleaned successfully")
print(df.head())

df.duplicated().value_counts()

df.info()

df.describe()

property_types = df['room type'].value_counts().to_frame()
property_types

import matplotlib.pyplot as plt

# Assuming property_types is a DataFrame with index = room types, column = 'count'
room_type_bar = plt.bar(property_types.index, property_types["count"])

# Add labels on top of bars
plt.bar_label(room_type_bar, labels=property_types["count"], padding=4)

# Set y-axis limits
plt.ylim([0, 50000])

# Set axis labels and title
plt.xlabel('Room Type')
plt.ylabel('Count')
plt.title('Property Types and Their Count in the Dataset')

# Show the plot
plt.show()

hood_group = df ['neighbourhood group'].value_counts().to_frame()
hood_group

# Assuming hood_group is a DataFrame with index = neighborhood groups, column = 'count'
hood_group_bar = plt.bar(hood_group.index, hood_group["count"])

# Add labels on top of bars
plt.bar_label(hood_group_bar, labels=hood_group["count"], padding=4)

# Set y-axis limits
plt.ylim([0, 40000])

# Set axis labels and title
plt.xlabel('Neighborhood Group')
plt.ylabel('Number of Listings')
plt.xticks(rotation=45)
plt.title('Which Neighborhood Groups Have the Highest Number of Listings')

# Show the plot
plt.show()

# Which neighborhood groups have the highest average prices for Airbnb listings?
avg_price = df.groupby('neighbourhood group')['price_$'].mean().sort_values(ascending=False).to_frame()

# Create bar plot
avg_price_bar = plt.bar(avg_price.index, avg_price.loc[:, 'price_$'])

# Add labels on top of bars
plt.bar_label(avg_price_bar, labels=round(avg_price.loc[:, 'price_$'], 2),
              label_type='edge', padding=4)

# Set axis limits
plt.ylim([0, 700])

# Axis labels
plt.xlabel('Neighborhood Group')
plt.ylabel('Average Price per Listings ($)')

# X-axis rotation
plt.xticks(rotation=45)

# Title
plt.title('Average Price per Listings ($) in each Neighborhood Group')

# Is there a relationship between the construction year of property and price?
df.groupby(df['Construction year'])['price_$'].mean().to_frame().plot();

plt.xlabel('Construction Year');
plt.ylabel('Average Price ($)');
plt.title('Average Price ($) for Properties in each Construction Year');

# Who are the top 10 hosts by calculated host listing count?
hosts = df.groupby('host name')['calculated host listings count'] \
          .sum() \
          .sort_values(ascending=False) \
          .nlargest(10) \
          .to_frame()

# Bar plot
hosts_bar = plt.bar(hosts.index, hosts.loc[:, 'calculated host listings count'])

# Add labels on top of bars
plt.bar_label(hosts_bar,
              labels=hosts.loc[:, 'calculated host listings count'],
              label_type='edge', padding=3)

# Axis labels
plt.xlabel('Hosts Name')
plt.ylabel('Calculated Host Listings Count')

# Rotate x-axis labels for readability
plt.xticks(rotation=80)

# Y-axis range
plt.ylim([0, 120000])

# Title
plt.title('Top 10 Hosts by Calculated host Listings Count')

# Group by 'host_identity_verified' and calculate mean review rate
review = df.groupby('host_identity_verified')['review rate number'].mean().sort_values(ascending=False).reset_index()

# Display the result
review

review_bar = plt.bar(review.index, review.loc[:, "review rate number"])
plt.bar_label(review_bar, labels = round(review.loc[:, "review rate number"], 2), padding = 4)
plt.ylim([0,4])
plt.xlabel('Host Verification Status')
plt.ylabel('Average Review Rate Number')
plt.title('Average Review Rate for each Verification Statistics.')

base_color = sns.color_palette()[0]
sns.boxplot(data = df, x = "host_identity_verified", y = "review rate number", color = base_color);
plt.xlabel('Host Verification status');
plt.ylabel('Review Rate Number');
plt.title('Average Review Rate for each Verification Status');

# Is there a correlation between the price of a listing and its service fee?
df['price_$'].corr(df['service_fee_$'])

sns.regplot(df, x = 'price_$', y = 'service_fee_$');
plt.xlabel('Price ($)');
plt.ylabel('Service Fee ($)');
plt.title('A Regression Plot showing the Correlation of the Price of a Listing and its Service Fee.');

# Group by neighborhood group and room type, then calculate mean review rate
ARRN = df.groupby(['neighbourhood group', 'room type'])['review rate number'].mean().to_frame().reset_index()

# Display the result
ARRN

plt.figure(figsize = [12,10]);
sns.barplot(data = df, x = 'neighbourhood group', y = 'review rate number', hue = 'room type' );
plt.xlabel('Neighbourhood Group');
plt.ylabel('Average Review Rate');
plt.title('Average Review Rate for each Room/Property Type in each Neighbourhood Group.');

#Are hosts with a higher calculated host listings count more likely to maintain higher availability throughout the year?
sns.regplot(df, x = 'calculated host listings count', y = 'availability 365');
plt.xlabel('Calculated Host Listings');
plt.ylabel('Availability 365');
plt.title('A Regression Plot of the Relationship between Calculated Host Listings Count and Availability 365');

df['calculated host listings count'].corr(df['availability 365'])